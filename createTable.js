import { makeElement } from "./library/makeElement.js"
import { processObj } from "./library/processObj.js"

/**
 * @property {HTMLTableElement} tableEl –≠–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ DOM
 * @property {HTMLElement} tableMenu –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –≤ DOM
 * @property {number} rowsPerPage –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @property {object} columns –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
 * @property {object[]} data –î–∞–Ω–Ω—ã–µ –∏–∑ JSON
 * @property {object[]} objects –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
 * @property {number} currentPage –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @property {boolean} isTableSortOn —Ñ–ª–∞–≥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–≤–∫–ª—é—á–µ–Ω–∞ –ª–∏)
 * @property {boolean} isFormOpen —Ñ–ª–∞–≥ —Ñ–æ—Ä–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏)
 * @property {boolean} isChangePageMenuOpen —Ñ–ª–∞–≥ –º–µ–Ω—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü (—Å–æ–∑–¥–∞–Ω–æ –ª–∏)
 */
export class AwesomeCoolTable {

    /**
     * @param {HTMLTableElement} table –≠–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ DOM
     * @param {HTMLElement} tableMenu –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –≤ DOM
     * @param {number} tableData.rowsPerPage –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     * @param {object} tableData.columns –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
     * @param {object[]} data –î–∞–Ω–Ω—ã–µ –∏–∑ JSON
     */
    constructor(table, tableMenu, { rowsPerPage, columns }, data) {
        this.tableEl = table
        this.tableMenu = tableMenu
        this.rowsPerPage = rowsPerPage
        this.columns = columns
        this.data = data

        // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏,
        // –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–µ
        // —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑,
        // –∏ –Ω–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        this.objects = this.data.map((object) =>
            processObj(object, Object.keys(this.columns)))

        for (const column of Object.keys(this.columns)) {
            // –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–µ–π—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            this.columns[column].hidden = false
        }
        this.isTableSortOn = false
        this.isFormOpen = false
        this.currentPage = 1
        this.isChangePageMenuOpen = false

        this.createTable()
    }

    /** 
     * —Å–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ–≤—É —Ç–∞–±–ª–∏—Ü—ã,
     * –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –∏ —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã 
    */
    createTable() {
        const thead = makeElement("thead",
            makeElement(
                "tr",
                    ...Object.keys(this.columns).map((column) => 
                        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
                        this.createHeader(column)
                    )
            )
        )
        this.tableEl.append(thead)

        // —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–Ω—é —Ç–∞–±–ª–∏—Ü—ã
        this.fillTableMenu()
        // —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–¥–∏ —Ç–∞–±–ª–∏—Ü—ã
        this.fillTable()
    }

    /** 
     * —Å–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã 
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     * @returns {HTMLTableCellElement} –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
    */
    createHeader(column) {
        const th = makeElement(
            "th",
            {
                // —Å—Ç–µ–π—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É / –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
                sortAscending: true, 
                "click": () => this.tableSort(th, column)
            },
                String(this.columns[column].value),
        )
        return th
    }

    /** 
     * —Å–æ–∑–¥–∞—ë—Ç —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–æ–∫, 
     * —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    */
    fillTableMenu() {
        this.tableMenu.append(
            makeElement("form",
                { name: "hideMenu" },
                    "–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:",
                    ...Object.keys(this.columns).map((column, i) =>
                        this.createHideCheckbox(column, i)
                    )
                    
            ),
            this.tableMenuSorting(),
            this.tableMenuPages()
        )
    }

    /** 
     * —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –º–µ–Ω—é,
     * –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ 
     * @param {boolean} sortAscending –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
     * @returns {HTMLFormElement} —Ñ–æ—Ä–º–∞ –º–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    */
    tableMenuSorting(sortAscending, column) {
        let form
        if (!this.isTableSortOn) {
            // —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é
            form = makeElement("form",
                { name: "sortingMenu" },
                    makeElement(
                        "a",
                            "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –≤—ã–∫–ª—é—á–µ–Ω–∞"
                    )
            )
            
            this.isTableSortOn = true
        }
        else {
            // –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            form = document.forms["sortingMenu"]
            let direction
            if (sortAscending) {
                direction = "A-–Ø"
            }
            else {
                direction = "–Ø-–ê"
            }
            form.firstChild.innerText =
                `—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ "${this.columns[column].value}" (${direction})`
        } 
        return form
    }

    /** 
     * —Å–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–∞–±–ª–∏—Ü—ã 
     * @returns {HTMLFormElement} —Ñ–æ—Ä–º–∞ –º–µ–Ω—é —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–∞–±–ª–∏—Ü—ã
    */
    tableMenuPages() {
        let form
        const formName = "pages"
        if (!this.isChangePageMenuOpen) {
            form = makeElement("form",
                {
                    name: formName,
                    class: "wrapper"
                },
                    makeElement("div",
                        // –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü 
                        makeElement("button",
                            {
                                type: "button",
                                name: "previous",
                                "click": () => this.changePage(this.currentPage-1)
                            },
                                "ü†î"
                        ),
                        makeElement("button",
                            {
                                type: "button",
                                name: "next",
                                "click": () => this.changePage(this.currentPage+1)
                            },
                                "‚ûù"
                        )
                    ),
                    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                    makeElement("a",
                        { name: "pagesCount" },      
                            `[ ${this.currentPage}/${this.objects.length/this.rowsPerPage} ]`
                    )
            )

            this.isChangePageMenuOpen = true
        }
        else {
            form = document.forms[formName]
            form.lastChild.innerText = `[ ${this.currentPage}/${this.objects.length/this.rowsPerPage} ]`
        }

        // –ø—Ä—è—á–µ—Ç –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        form["previous"].classList.toggle(
            "hidden", this.currentPage == 1)
        form["next"].classList.toggle(
            "hidden", this.currentPage ==
                Object.keys(this.objects).length / this.rowsPerPage)
                
        return form
    }
    
    /** 
     * —Å–æ–∑–¥–∞—ë—Ç —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è 
    */
    fillTable() {
        const tbody = makeElement(
            "tbody",
                ...this.objects
                    .slice((this.currentPage-1) * this.rowsPerPage,
                        this.currentPage * this.rowsPerPage)
                    .map((object) => this.createRow(object)
                )
        )

        this.tableEl.append(tbody)
    }

    /** 
     * –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ 
     * @param {object} object –æ–±—ä–µ–∫—Ç —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
     * @returns {HTMLTableRowElement} —Ä—è–¥ —Ç–∞–±–ª–∏—Ü—ã
    */
    createRow(object) {
        const tr = makeElement(
            "tr",
            { "click": () => this.editObj(object) },
                ...Object.keys(this.columns).map((column) =>
                    this.createTd(object, column))
        )
        return tr
    }

    /** 
     * —Å–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —è—á–µ–π–∫–∏ 
     * @param {object} object –æ–±—ä–µ–∫—Ç —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —è—á–µ–π–∫–∏
     * @returns {HTMLTableCellElement} —è—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    */
    createTd(object, column) {
        const td = makeElement(
            "td",
                makeElement("a", String(object[column]))
        )
        if (column == 'about') {
            // –¥–æ–±–∞–≤–ª—è–µ—Ç —è—á–µ–π–∫–µ about css –∫–ª–∞—Å—Å (–¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            td.classList.add('about')
        }
        if (this.columns[column].hidden) {
            // —Å–∫—Ä—ã–≤–∞–µ—Ç —è—á–µ–π–∫—É, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å–∫—Ä—ã—Ç–∞
            td.classList.add('hidden')
        }
        if (column == 'eyeColor') {
            
            /*
            –í –∫–æ–ª–æ–Ω–∫–µ ‚ÄúeyeColor‚Äù –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–∞, 
            —Å–æ—Ö—Ä–∞–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.
            –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–æ–∂–µ –æ—Å—Ç–∞—ë—Ç—Å—è –∏ –µ–≥–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É,
            –ø—Ä–∏ —ç—Ç–æ–º —Ü–≤–µ—Ç —Ç–∞–∫–∂–µ –º–µ–Ω—è–µ—Ç—Å—è.
            –ï—Å–ª–∏ –Ω–∞–¥–æ —Å–∫—Ä—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ, 
            —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–º—É –∫—Å—Å –∫–ª–∞—Å—Å hidden:
            td.firstChild.classList.add("hidden")
            –Ø –ø–æ–¥—É–º–∞–ª–∞, —á—Ç–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

            –ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–ª–∞–∑–∞ —Ç–æ–∂–µ –ª–µ–≥–∫–æ —É–±–∏—Ä–∞–µ—Ç—Å—è –≤ css, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–æ–ª—å–Ω–æ.
            */

            td.classList.add("eyeColor")
            const color = makeElement("div", { "class" : "eye" })
            color.style["color"] = object[column]
            
            td.insertBefore(color, td.firstChild)
        }
        return td
    }

    /** 
     * —É–±–∏—Ä–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é,
     * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–µ–π—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –º–µ–Ω—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
     * @param {number} i —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    */
    changePage(i) {
        this.currentPage = i
        this.rerenderTable()
        this.tableMenuPages()
    }

    /** 
     * —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
     * @param {HTMLTableCellElement} th –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
    */
    tableSort(th, column) {
        if (th.sortAscending) {
            // —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            this.objects.sort(
                (objA, objB) => objA[column] > objB[column] ? 1 : -1
            )
        } 
        else {
            // –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            this.objects.sort(
                (objA, objB) => objA[column] < objB[column] ? 1 : -1
            )
        }
        this.rerenderTable() // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        this.tableMenuSorting(th.sortAscending, column) // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        th.sortAscending = !th.sortAscending // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }
    
    /** 
     * —Å–æ–∑–¥–∞—ë—Ç —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–æ–∫ 
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä—ã–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
     * @param {number} i –Ω–æ–º–µ—Ä —Å–∫—Ä—ã–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
     * @returns {HTMLInputElement} —á–µ–∫–±–æ–∫—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–∫–∏
    */
    createHideCheckbox(column, i) {
        const checkbox = makeElement(
            "input",
            {
                type: "checkbox",
                name: column,
                checked: true,
                "change": () => this.hideColumn(column, i)
            }
        )
        return checkbox
}

    /** 
     * —Å–∫—Ä—ã–≤–∞–µ—Ç/–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É, 
     * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–µ–π—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ 
     * @param {string} column –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä—ã–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
     * @param {number} i –Ω–æ–º–µ—Ä —Å–∫—Ä—ã–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
    */
    hideColumn(column, i) {
        for (const each of this.tableEl.rows) {
            each.children[i].classList.toggle("hidden")
        }
        this.columns[column].hidden = !this.columns[column].hidden
    }

    /** 
     * —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (—Å—Ç—Ä–æ–∫–∏) —Ç–∞–±–ª–∏—Ü—ã
     * @param {object} object –∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç (—Å—Ç—Ä–æ–∫–∞)
    */
    editObj(object) {
        let form
        const formName = "editObj"
        if (!this.formOpen) {
            // —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –∏–Ω–ø—É—Ç–∞–º–∏ 
            // (–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –∏–Ω–ø—É—Ç–∞)
            form = makeElement(
                "form",
                { name: formName },
                    ...Object.keys(this.columns).map((column) =>
                        makeElement(
                            "input",
                            {
                                value: object[column],
                                name: column
                            }
                        )
                    ),
                    makeElement(
                        "button",
                        { type: "submit" },
                            "‚úì"
                    ),
                    makeElement(
                        "button",
                        {
                            type: "button",
                            "click" : () => this.hideForm(form)
                        },
                            "‚òì"
                    )
            )
            
            this.tableMenu.append(form)
            this.formOpen = true
        }
        else {
            // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, —Ç–æ –±–µ—Ä—ë—Ç —Ñ–æ—Ä–º—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            // –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–ø—É—Ç—ã
            form = document.forms[formName]
            const inputNames = Object.keys(this.columns)
            for (const input of inputNames) {
                form[input].value = object[input]
            }
        }

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        form.onsubmit = (e) =>
            this.handleEditSubmit(e, form.name, object,
                ...Object.keys(this.columns).map((column) => column))
    }

    /** 
     * –∏–∑–º–µ–Ω—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É
     * @param {SubmitEvent} e submitEvent –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
     * @param {string} formName –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
     * @param {object} object –∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç (—Å—Ç—Ä–æ–∫–∞)
     * @param {string[]} inputNames –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–ø—É—Ç–æ–≤ —Ä–∞–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    */
    handleEditSubmit(e, formName, object, ...inputNames) {
        // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        e.preventDefault()
        const form = document.forms[formName]
        // –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—É –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ
        for (const prop of inputNames) {
            object[prop] = form[prop].value
        }
        this.rerenderTable()
        this.hideForm(form)
    }

    /** –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–µ–π—Ç —Ñ–æ—Ä–º—ã 
     * @param {HTMLFormElement} form —Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∑–∞–∫—Ä—ã—Ç—å
    */
    hideForm(form) {
        form.remove()
        this.formOpen = false
    }

    /** 
     * –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É 
    */
    rerenderTable() {
        // —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.tableEl.tBodies[0].remove() 
        // —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.fillTable() 
    }
}