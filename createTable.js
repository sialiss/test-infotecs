import { makeElement } from "./makeElement.js" 
// import { createHideBtn } from "./buttons.js"
// import { tableSort } from "./tableSort.js"
export class AwesomeCoolTable {

    constructor(table, tableMenu, { rowsPerPage, columns }, data) {
        this.table = table // –≠–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ DOC
        this.tableMenu = tableMenu // –≠–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –≤ DOC
        this.rowsPerPage = rowsPerPage // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.columns = columns // –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        this.data = data // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
        this.tableSortMore = true
    }

    createTable() {
        // "ü†ì"
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã
        const thead = makeElement("thead",
            makeElement("tr",
                ...Object.keys(this.columns).map((column) => 
                    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
                    this.createHeader(column)
                )
            )
        )
        this.table.append(thead)
        this.fillTableMenu()
        // —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–¥–∏ —Ç–∞–±–ª–∏—Ü—ã
        this.fillTable()
    }

    createHeader(column) {
        const th = makeElement("th",
            String(this.columns[column]),
        ) 
        const pointer = makeElement("p",
            "ü†ì")
        th.append(pointer)
        th.addEventListener("click", () => this.tableSort(pointer, column))
        return th
    }

    fillTableMenu() {
        // –∑–¥–µ—Å—å —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–æ–∫, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for (const column of Object.keys(this.columns)) {
            this.tableMenu.append(this.createHideBtn(column))
        }
    }
    
    fillTable() {
        // –°–æ–∑–¥–∞—ë—Ç —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        const tbody = makeElement("tbody",
            ...this.data.map((object) => 
                this.fillRow(object)
            )
        )
        this.table.append(tbody)
    }

    fillRow(object) {
        // –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        const tr = makeElement("tr",
            ...Object.keys(this.columns).map((column) =>
                // –°–æ–∑–¥–∞—ë—Ç —è—á–µ–π–∫—É (—Å—Ç–æ–ª–±–∏–∫)
                this.createTd(object, column)
            ) 
        )
        return tr
    }

    createTd(object, column) {
        // console.log(object, column)
        const td = makeElement("td")
        if (column == 'about') {
            // –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–µ about css –∫–ª–∞—Å—Å (–¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            td.classList.add('about')
        }
        if (object[column] != undefined) {
            // –µ—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ json –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º,
            // —Ç–æ —è—á–µ–π–∫–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è
            td.innerText = object[column]
        }
        else {
            // –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, 
            // —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
            td.innerText = this.getFromProperties(object, column)
        }
        return td
    }

    tableSort(pointer, column) {
        // —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        // –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—Ä–µ–ª–æ—á–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –º–µ–Ω—é (–∫–æ–ª–æ–Ω–∫–∞, —Å—Ç—Ä–µ–ª–æ—á–∫–∞)

        const sortConditionMore = [
            (objA, objB) => objA[column] > objB[column] ? 1 : -1,
            (objA, objB) =>
                this.getFromProperties(objA, column) >
                    this.getFromProperties(objB, column) ? 1 : -1    
        ]
        const sortConditionLess = [
            (objA, objB) => objA[column] < objB[column] ? 1 : -1,
            (objA, objB) =>
                this.getFromProperties(objA, column) <
                    this.getFromProperties(objB, column) ? 1 : -1 
        ]

        // –µ—Å–ª–∏ —É –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ, —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç
        if (this.data[0][column] != undefined) {
            
            if (this.tableSortMore) {
                // —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –µ—Å–ª–∏ —Å—Ç–µ–π—Ç true
                this.data.sort(sortConditionMore[0])
            } 
            // –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            else {
                this.data.sort(sortConditionLess[0])
            }
        }
        // –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        else {
            // –±–µ—Ä—ë—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
            if (this.tableSortMore) {
                this.data.sort(sortConditionMore[1])
            } 
            else {
                this.data.sort(sortConditionLess[1])
            }
        }

        this.table.tBodies[0].remove() // —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.fillTable() // –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        
        if (this.tableSortMore == true) {
            this.tableSortMore = false
        }
        else {
            this.tableSortMore = true
        }
        pointer.classList.toggle("rotated")
}
    createHideBtn(i) {
        const btn = makeElement("button", "‚òì")
        btn.addEventListener("click", () => this.hideColumn(i))
        return btn
}

    hideColumn(column) {
        // –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ —Å i—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º
        // —Å–¥–µ–ª–∞—Ç—å —Å—Ç–µ–π—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        // —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É —á–µ–∫–±–æ–∫—Å–æ–º
        
    
        delete this.columns[column]

        this.table.tBodies[0].remove() // —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
        this.table.tHead.remove()
        this.tableMenu.buttons.remove()
        this.createTable() // –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–µ–ª–∞ —Ç–∞–±–ª–∏—Ü—ã
}

    getFromProperties(object, nedeedData) {
        // –±–µ—Ä—ë—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ undefined)
        // –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Å–≤–æ–π—Å—Ç–≤–∞–º –æ–±—ä–µ–∫—Ç–∞ json, 
        // –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for (const name of Object.keys(object)) {
                    if (object[name][nedeedData]) {
                        return object[name][nedeedData]
                    }
                }
    }
}

